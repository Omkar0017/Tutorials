import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.Properties;
import java.util.Map;

import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
class KafkaReplayConsumerTest {

    @Mock
    private KafkaSecurityConfig kafkaSecurityConfig;

    @InjectMocks
    private KafkaReplayConsumer kafkaReplayConsumer;

    private ReplayConfig replayConfig;
    
    @BeforeEach
    void setUp() {
        replayConfig = mock(ReplayConfig.class);
        when(replayConfig.getBootstrapServersStr()).thenReturn("localhost:9092");
        when(replayConfig.getConsumerProperties()).thenReturn(Map.of("group.id", "test-group"));
        when(kafkaSecurityConfig.getSecurityConfig()).thenReturn(Map.of("security.protocol", "SSL"));
    }

    @Test
    void testConsumerProperties() {
        Properties properties = kafkaReplayConsumer.consumerProperties(replayConfig);
        
        assertEquals("localhost:9092", properties.getProperty("bootstrap.servers"));
        assertEquals("test-group", properties.getProperty("group.id"));
        assertEquals("SSL", properties.getProperty("security.protocol"));
    }

    @Test
    void testBuildKafkaReplayConsumer() {
        Consumer<String, ReplayerDto> consumer = kafkaReplayConsumer.buildKafkaReplayConsumer(replayConfig);
        
        assertNotNull(consumer);
        assertTrue(consumer instanceof KafkaConsumer);
    }
}
