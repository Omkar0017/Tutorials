<dependencies>
    <!-- Kafka dependencies -->
    <dependency>
        <groupId>org.springframework.kafka</groupId>
        <artifactId>spring-kafka</artifactId>
    </dependency>

    <!-- Avro dependencies -->
    <dependency>
        <groupId>io.confluent</groupId>
        <artifactId>kafka-avro-serializer</artifactId>
        <version>6.2.0</version>
    </dependency>

    <!-- JSON processing -->
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
    </dependency>
</dependencies>



import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.avro.generic.GenericRecord;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.kafka.support.AvroUtils;
import org.springframework.stereotype.Service;

import java.util.Map;

@Service
public class KafkaConsumerService {

    private final ObjectMapper objectMapper = new ObjectMapper();

    @KafkaListener(topics = {"topic1", "topic2", "topic3", "topic4", "topic5", "topic6", "topic7", "topic8"})
    public void consumeMessage(ConsumerRecord<String, Object> record) {
        String topic = record.topic();
        Object message = record.value();

        if (message instanceof String) {
            handleStringMessage(topic, (String) message);
        } else if (message instanceof GenericRecord) {
            handleAvroMessage(topic, (GenericRecord) message);
        }
    }

    private void handleStringMessage(String topic, String message) {
        try {
            JsonNode jsonNode = objectMapper.readTree(message);
            extractFieldsFromJson(topic, jsonNode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleAvroMessage(String topic, GenericRecord avroRecord) {
        try {
            String json = AvroUtils.avroToJson(avroRecord);
            JsonNode jsonNode = objectMapper.readTree(json);
            extractFieldsFromJson(topic, jsonNode);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void extractFieldsFromJson(String topic, JsonNode jsonNode) {
        // Extract fields from JSON based on topic
        switch (topic) {
            case "topic1":
                // Extract specific fields from JSON for topic1
                break;
            case "topic2":
                // Extract specific fields from JSON for topic2
                break;
            // Add cases for other topics
        }
    }
}



