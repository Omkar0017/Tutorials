import static org.junit.Assert.assertEquals;

import org.apache.avro.Schema;
import org.apache.avro.generic.GenericData;
import org.apache.avro.generic.GenericRecord;
import org.apache.avro.generic.GenericRecordBuilder;
import org.junit.Before;
import org.junit.Test;

public class AvroMessageTest {

    private Schema schema;
    private GenericRecord messageRecord;

    @Before
    public void setUp() {
        // Define the schema
        String schemaStr = "{\n" +
                "  \"type\": \"record\",\n" +
                "  \"name\": \"Message\",\n" +
                "  \"fields\": [\n" +
                "    {\n" +
                "      \"name\": \"clientRequestID\",\n" +
                "      \"type\": {\n" +
                "        \"type\": \"record\",\n" +
                "        \"name\": \"ClientRequestID\",\n" +
                "        \"fields\": [\n" +
                "          {\"name\": \"source\", \"type\": \"string\"},\n" +
                "          {\"name\": \"id\", \"type\": \"string\"}\n" +
                "        ]\n" +
                "      }\n" +
                "    },\n" +
                "    {\n" +
                "      \"name\": \"firstClientRequestID\",\n" +
                "      \"type\": \"ClientRequestID\"\n" +
                "    },\n" +
                "    {\n" +
                "      \"name\": \"settlementStatus\",\n" +
                "      \"type\": \"string\"\n" +
                "    },\n" +
                "    {\n" +
                "      \"name\": \"instructionStatus\",\n" +
                "      \"type\": \"string\"\n" +
                "    },\n" +
                "    {\n" +
                "      \"name\": \"latestSettlementConfirmation\",\n" +
                "      \"type\": \"ClientRequestID\"\n" +
                "    }\n" +
                "  ]\n" +
                "}";

        // Parse the schema
        schema = new Schema.Parser().parse(schemaStr);

        // Create the GenericRecord instance with the provided data
        messageRecord = createMessageRecord();
    }

    private GenericRecord createMessageRecord() {
        // Create nested records for "clientRequestID" and others
        Schema clientRequestIDSchema = schema.getField("clientRequestID").schema();

        GenericRecord clientRequestID = new GenericRecordBuilder(clientRequestIDSchema)
                .set("source", "abc")
                .set("id", "1234")
                .build();

        GenericRecord firstClientRequestID = new GenericRecordBuilder(clientRequestIDSchema)
                .set("source", "xyz")
                .set("id", "789")
                .build();

        GenericRecord latestSettlementConfirmation = new GenericRecordBuilder(clientRequestIDSchema)
                .set("source", "jkl")
                .set("id", "567")
                .build();

        // Create the main record
        return new GenericRecordBuilder(schema)
                .set("clientRequestID", clientRequestID)
                .set("firstClientRequestID", firstClientRequestID)
                .set("settlementStatus", "close")
                .set("instructionStatus", "instructionStatus")
                .set("latestSettlementConfirmation", latestSettlementConfirmation)
                .build();
    }

    @Test
    public void testClientRequestID() {
        // Verify clientRequestID values
        GenericRecord clientRequestID = (GenericRecord) messageRecord.get("clientRequestID");
        assertEquals("abc", clientRequestID.get("source"));
        assertEquals("1234", clientRequestID.get("id"));
    }

    @Test
    public void testFirstClientRequestID() {
        // Verify firstClientRequestID values
        GenericRecord firstClientRequestID = (GenericRecord) messageRecord.get("firstClientRequestID");
        assertEquals("xyz", firstClientRequestID.get("source"));
        assertEquals("789", firstClientRequestID.get("id"));
    }

    @Test
    public void testSettlementStatus() {
        // Verify settlementStatus value
        assertEquals("close", messageRecord.get("settlementStatus"));
    }

    @Test
    public void testInstructionStatus() {
        // Verify instructionStatus value
        assertEquals("instructionStatus", messageRecord.get("instructionStatus"));
    }

    @Test
    public void testLatestSettlementConfirmation() {
        // Verify latestSettlementConfirmation values
        GenericRecord latestSettlementConfirmation = (GenericRecord) messageRecord.get("latestSettlementConfirmation");
        assertEquals("jkl", latestSettlementConfirmation.get("source"));
        assertEquals("567", latestSettlementConfirmation.get("id"));
    }
}
